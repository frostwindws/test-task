//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ArticlesClient.CommentsService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CommentDto", Namespace="http://schemas.datacontract.org/2004/07/Articles.Services.Models")]
    [System.SerializableAttribute()]
    public partial class CommentDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ArticleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ArticleId {
            get {
                return this.ArticleIdField;
            }
            set {
                if ((this.ArticleIdField.Equals(value) != true)) {
                    this.ArticleIdField = value;
                    this.RaisePropertyChanged("ArticleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Created {
            get {
                return this.CreatedField;
            }
            set {
                if ((this.CreatedField.Equals(value) != true)) {
                    this.CreatedField = value;
                    this.RaisePropertyChanged("Created");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CommentsService.ICommentsService")]
    public interface ICommentsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentsService/GetAll", ReplyAction="http://tempuri.org/ICommentsService/GetAllResponse")]
        ArticlesClient.CommentsService.CommentDto[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentsService/GetAll", ReplyAction="http://tempuri.org/ICommentsService/GetAllResponse")]
        System.Threading.Tasks.Task<ArticlesClient.CommentsService.CommentDto[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentsService/Get", ReplyAction="http://tempuri.org/ICommentsService/GetResponse")]
        ArticlesClient.CommentsService.CommentDto Get(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentsService/Get", ReplyAction="http://tempuri.org/ICommentsService/GetResponse")]
        System.Threading.Tasks.Task<ArticlesClient.CommentsService.CommentDto> GetAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentsService/GetForArticle", ReplyAction="http://tempuri.org/ICommentsService/GetForArticleResponse")]
        ArticlesClient.CommentsService.CommentDto[] GetForArticle(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentsService/GetForArticle", ReplyAction="http://tempuri.org/ICommentsService/GetForArticleResponse")]
        System.Threading.Tasks.Task<ArticlesClient.CommentsService.CommentDto[]> GetForArticleAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentsService/Create", ReplyAction="http://tempuri.org/ICommentsService/CreateResponse")]
        ArticlesClient.CommentsService.CommentDto Create(ArticlesClient.CommentsService.CommentDto comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentsService/Create", ReplyAction="http://tempuri.org/ICommentsService/CreateResponse")]
        System.Threading.Tasks.Task<ArticlesClient.CommentsService.CommentDto> CreateAsync(ArticlesClient.CommentsService.CommentDto comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentsService/Update", ReplyAction="http://tempuri.org/ICommentsService/UpdateResponse")]
        ArticlesClient.CommentsService.CommentDto Update(ArticlesClient.CommentsService.CommentDto comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentsService/Update", ReplyAction="http://tempuri.org/ICommentsService/UpdateResponse")]
        System.Threading.Tasks.Task<ArticlesClient.CommentsService.CommentDto> UpdateAsync(ArticlesClient.CommentsService.CommentDto comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentsService/Delete", ReplyAction="http://tempuri.org/ICommentsService/DeleteResponse")]
        void Delete(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentsService/Delete", ReplyAction="http://tempuri.org/ICommentsService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(long id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommentsServiceChannel : ArticlesClient.CommentsService.ICommentsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommentsServiceClient : System.ServiceModel.ClientBase<ArticlesClient.CommentsService.ICommentsService>, ArticlesClient.CommentsService.ICommentsService {
        
        public CommentsServiceClient() {
        }
        
        public CommentsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CommentsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommentsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommentsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ArticlesClient.CommentsService.CommentDto[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<ArticlesClient.CommentsService.CommentDto[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public ArticlesClient.CommentsService.CommentDto Get(long id) {
            return base.Channel.Get(id);
        }
        
        public System.Threading.Tasks.Task<ArticlesClient.CommentsService.CommentDto> GetAsync(long id) {
            return base.Channel.GetAsync(id);
        }
        
        public ArticlesClient.CommentsService.CommentDto[] GetForArticle(long id) {
            return base.Channel.GetForArticle(id);
        }
        
        public System.Threading.Tasks.Task<ArticlesClient.CommentsService.CommentDto[]> GetForArticleAsync(long id) {
            return base.Channel.GetForArticleAsync(id);
        }
        
        public ArticlesClient.CommentsService.CommentDto Create(ArticlesClient.CommentsService.CommentDto comment) {
            return base.Channel.Create(comment);
        }
        
        public System.Threading.Tasks.Task<ArticlesClient.CommentsService.CommentDto> CreateAsync(ArticlesClient.CommentsService.CommentDto comment) {
            return base.Channel.CreateAsync(comment);
        }
        
        public ArticlesClient.CommentsService.CommentDto Update(ArticlesClient.CommentsService.CommentDto comment) {
            return base.Channel.Update(comment);
        }
        
        public System.Threading.Tasks.Task<ArticlesClient.CommentsService.CommentDto> UpdateAsync(ArticlesClient.CommentsService.CommentDto comment) {
            return base.Channel.UpdateAsync(comment);
        }
        
        public void Delete(long id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(long id) {
            return base.Channel.DeleteAsync(id);
        }
    }
}
